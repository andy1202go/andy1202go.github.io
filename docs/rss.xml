<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Andy's Blog</title><link>https://andy1202go.github.io</link><description>Tech Experience Learn Think</description><copyright>Andy's Blog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/11980041</url><title>avatar</title><link>https://andy1202go.github.io</link></image><lastBuildDate>Thu, 27 Jun 2024 07:27:55 +0000</lastBuildDate><managingEditor>Andy's Blog</managingEditor><ttl>60</ttl><webMaster>Andy's Blog</webMaster><item><title>JavaScript(3) 函数 Part1</title><link>https://andy1202go.github.io/post/JavaScript%283%29%20-han-shu-%20Part1.html</link><description>## 1 函数定义和调用&#13;
&#13;
常规定义：&#13;
&#13;
```javascript&#13;
function abs(x){&#13;
    ...&#13;
}&#13;
```&#13;
&#13;
- function指出这是一个函数定义&#13;
- abs是函数名&#13;
- (x)内是函数的参数，多个以逗号分隔&#13;
- {}是函数体&#13;
&#13;
需要注意：&#13;
&#13;
- 一旦执行到return就结束函数&#13;
- 如果没有return，会返回undefined&#13;
&#13;
由于JavaScript的函数也是一个对象，所以有另一种函数定义方法&#13;
&#13;
```javascript&#13;
var abs = function(x){&#13;
    ...&#13;
};&#13;
```&#13;
&#13;
需要注意：&#13;
&#13;
- 这种方式要有分号结尾&#13;
- 使用上完全相同&#13;
&#13;
另外，JavaScript对函数入参比较随意，需要格外注意&#13;
&#13;
```javascript&#13;
abs(10, 'blablabla'); // 多个参数，只用了第一个；返回10&#13;
abs(-9, 'haha', 'hehe', null); // 返回9&#13;
abs(); // 返回NaN&#13;
&#13;
//改良&#13;
function abs(x) {&#13;
    if (typeof x !== 'number') {&#13;
        throw 'Not a number';&#13;
    }&#13;
    if (x &gt;= 0) {&#13;
        return x;&#13;
    } else {&#13;
        return -x;&#13;
    }&#13;
}&#13;
```&#13;
&#13;
### arguments&#13;
&#13;
&gt; JavaScript还有一个免费赠送的关键字`arguments`，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。</description><guid isPermaLink="true">https://andy1202go.github.io/post/JavaScript%283%29%20-han-shu-%20Part1.html</guid><pubDate>Thu, 27 Jun 2024 07:27:36 +0000</pubDate></item><item><title>JavaScript(2) 入门 Part2</title><link>https://andy1202go.github.io/post/JavaScript%282%29%20-ru-men-%20Part2.html</link><description>## 6 对象&#13;
&#13;
- 访问属性是通过`.`操作符完成的，但这要求属性名必须是一个有效的变量名。</description><guid isPermaLink="true">https://andy1202go.github.io/post/JavaScript%282%29%20-ru-men-%20Part2.html</guid><pubDate>Thu, 27 Jun 2024 07:24:46 +0000</pubDate></item><item><title>JavaScript(1) 入门 Part1</title><link>https://andy1202go.github.io/post/JavaScript%281%29%20-ru-men-%20Part1.html</link><description>&gt; 简单地说，JavaScript是一种运行在浏览器中的解释型的编程语言。</description><guid isPermaLink="true">https://andy1202go.github.io/post/JavaScript%281%29%20-ru-men-%20Part1.html</guid><pubDate>Thu, 27 Jun 2024 07:24:03 +0000</pubDate></item><item><title>业务系统要求浅要总结</title><link>https://andy1202go.github.io/post/ye-wu-xi-tong-yao-qiu-qian-yao-zong-jie.html</link><description># 业务系统要求&#13;
&#13;
一句话目标：建立好负责的项目&#13;
&#13;
项目要达到&#13;
&#13;
|              | 性能要求  开发要求    效率要求  质量要求 |&#13;
| ------------ | ---------------------------------------- |&#13;
| **应用视角** | 高并发   开发速度快  并行开发  高可用    |&#13;
| **底层视角** | 云原生    分布式      微服务    k8s      |&#13;
| **抽象视角** | 流量治理  服务治理    资源治理  数据治理 |&#13;
&#13;
## 应用视角&#13;
&#13;
### 高并发系统&#13;
&#13;
#### 什么是高并发？&#13;
&#13;
&gt; 高并发是指特定的系统或应用程序可以同时处理大量的并发处理请求，要求其能够同时应付高流量的访问。</description><guid isPermaLink="true">https://andy1202go.github.io/post/ye-wu-xi-tong-yao-qiu-qian-yao-zong-jie.html</guid><pubDate>Thu, 27 Jun 2024 07:20:02 +0000</pubDate></item><item><title>Python菜鸟入门</title><link>https://andy1202go.github.io/post/Python-cai-niao-ru-men.html</link><description>## [[Python3 教程 | 菜鸟教程](https://www.runoob.com/python/python-tutorial.html)](https://www.runoob.com/python/python-tutorial.html)&#13;
&#13;
**[[Python Tutor: Visualize code](https://pythontutor.com/visualize.html#mode=edit)](https://pythontutor.com/visualize.html#mode=edit)**&#13;
&#13;
### Python 发展历史&#13;
&#13;
Python 是由 Guido van Rossum 在八十年代末和九十年代初，在荷兰国家数学和计算机科学研究所设计出来的。</description><guid isPermaLink="true">https://andy1202go.github.io/post/Python-cai-niao-ru-men.html</guid><pubDate>Thu, 27 Jun 2024 07:16:53 +0000</pubDate></item><item><title>Linux 入门 Part3</title><link>https://andy1202go.github.io/post/Linux%20-ru-men-%20Part3.html</link><description>## 2 Shell语言的知识内容&#13;
&#13;
略&#13;
&#13;
## 3 Linux相关的参考手册&#13;
&#13;
1. [[Linux 命令大全](https://www.w3cschool.cn/linux/linux-command-manual.html)](https://www.w3cschool.cn/linux/linux-command-manual.html)&#13;
2. [[Nginx 安装配置](https://www.w3cschool.cn/linux/u5xv1rha.html)](https://www.w3cschool.cn/linux/u5xv1rha.html)&#13;
3. [[MySQL 安装配置](https://www.w3cschool.cn/linux/z29j1rhv.html)](https://www.w3cschool.cn/linux/z29j1rhv.html)&#13;
4. [[linux删除文件夹命令使用方法](https://www.w3cschool.cn/linux/linux-9yfc2oyy.html)](https://www.w3cschool.cn/linux/linux-9yfc2oyy.html)&#13;
5. [[Linux关机命令和重启命令说明](https://www.w3cschool.cn/linux/linux-are12oz3.html)](https://www.w3cschool.cn/linux/linux-are12oz3.html)&#13;
&#13;
## 参考资料&#13;
&#13;
[[Linux 教程](https://www.w3cschool.cn/linux/)](https://www.w3cschool.cn/linux/)&#13;
&#13;
[[谈谈如何学习Linux操作系统](http://ixdba.blog.51cto.com/2895551/569329/)](http://ixdba.blog.51cto.com/2895551/569329/)&#13;
&#13;
[[Linux官网](http://www.linux.org/)](http://www.linux.org/) （此网站经常显示服务器错误）&#13;
&#13;
[[Linux下载](https://www.linux.org/pages/download/)](https://www.linux.org/pages/download/)&#13;
&#13;
[[Linux API文档](http://download.csdn.net/detail/a7320760/3617981)](http://download.csdn.net/detail/a7320760/3617981)&#13;
&#13;
[[Linux教程](https://www.w3cschool.cn/linux)](https://www.w3cschool.cn/linux)&#13;
&#13;
[[Linux视频课程](https://www.w3cschool.cn/minicourse/play/linux_my)](https://www.w3cschool.cn/minicourse/play/linux_my)&#13;
&#13;
[[Linux问答](https://www.w3cschool.cn/topic/linux)](。</description><guid isPermaLink="true">https://andy1202go.github.io/post/Linux%20-ru-men-%20Part3.html</guid><pubDate>Thu, 27 Jun 2024 07:14:23 +0000</pubDate></item><item><title>Linux 入门 Part2</title><link>https://andy1202go.github.io/post/Linux%20-ru-men-%20Part2.html</link><description>### 1.6 文件与目录管理&#13;
&#13;
- 绝对路径，就是从/根目录开始的&#13;
- 相对路径，相对于当前所在的目录&#13;
&#13;
#### 处理目录的常用命令&#13;
&#13;
接下来我们就来看几个常见的处理目录的命令吧：&#13;
&#13;
- ls: 列出目录&#13;
- cd：切换目录&#13;
- pwd：显示目前的目录&#13;
- mkdir：创建一个新的目录&#13;
- rmdir：删除一个空的目录&#13;
- cp: 复制文件或目录&#13;
- rm: 移除文件或目录&#13;
- mv: 移动文件与目录、文件重命名&#13;
&#13;
你可以使用 *man [命令]* 来查看各个命令的使用文档，如 ：man cp。</description><guid isPermaLink="true">https://andy1202go.github.io/post/Linux%20-ru-men-%20Part2.html</guid><pubDate>Thu, 27 Jun 2024 07:13:48 +0000</pubDate></item><item><title>Linux入门 Part1</title><link>https://andy1202go.github.io/post/Linux-ru-men-%20Part1.html</link><description>&#13;
&gt; 初级阶段：&#13;
&gt; 1． 命令是必须要学的，linux常用的命令大概在80个左右，这些常用命令一定要熟练掌握。</description><guid isPermaLink="true">https://andy1202go.github.io/post/Linux-ru-men-%20Part1.html</guid><pubDate>Thu, 27 Jun 2024 07:12:33 +0000</pubDate></item><item><title>Test2</title><link>https://andy1202go.github.io/post/Test2.html</link><description>1231。</description><guid isPermaLink="true">https://andy1202go.github.io/post/Test2.html</guid><pubDate>Thu, 27 Jun 2024 07:11:51 +0000</pubDate></item><item><title>The Key To Accelerating Your Coding Skills-文章读后小结</title><link>https://andy1202go.github.io/post/The%20Key%20To%20Accelerating%20Your%20Coding%20Skills--wen-zhang-du-hou-xiao-jie.html</link><description>### 文章链接：http://blog.thefirehoseproject.com/posts/learn-to-code-and-be-self-reliant/&#13;
&#13;
&gt; 在系统地学习编程技能之前，我希望你能先看一下 ' The Key To Accelerating Your Coding Skills'， 这篇文章会告诉你如何有效地快速提高自己的编程能力。</description><guid isPermaLink="true">https://andy1202go.github.io/post/The%20Key%20To%20Accelerating%20Your%20Coding%20Skills--wen-zhang-du-hou-xiao-jie.html</guid><pubDate>Thu, 27 Jun 2024 03:02:19 +0000</pubDate></item></channel></rss>